class Table {
  AvailabilityStatus {
    Available {
      inUse() / {
      	Table[] tables =  {this};
      	Order order = new Order((java.sql.Date) new Date(), getRestoApp(), tables);
      	getRestoApp().addOrder(order);
      	getRestoApp().addCurrentOrder(order);
      } -> InUse;
    }
    
    InUse {
    	OrderingItems {
	    	orderItem(Order order, OrderItem aOrderItem) -> / {
	    		order.addOrderItem(aOrderItem);
	    	} OrderingItems;
	    	
	    	IssueBill(Bill aBill) -> / {
	    		getOrder(0).addBill(aBill);
	    	} IssuingBills;
	    	
    	}
    	
    	IssuingBills {
	    	orderItem(Order order, OrderItem aOrderItem) [getOrder(0).numberOfBills() > 0] -> / {
	    		order.addOrderItem(aOrderItem);
	    	} IssuingBills;
	    	
	    	IssueBill(Bill aBill) -> / {
    			getOrder(0).addBill(aBill);
    		} IssuingBills;	
	    	
	    	payBill(Bill aBill) [getOrder(0).numberOfBills() > 2] -> / {
    	  		aBill.delete();
    		} IssuingBills;	
    		
    		payBill(Bill aBill) [getOrder(0).numberOfBills() < 2] -> / {
    	  		aBill.delete();
    		} ReadyForAvailable;
    	}
    	
    	ReadyForAvailable {
    		orderItem(Order order, OrderItem aOrderItem) -> / {
	    		order.addOrderItem(aOrderItem);
	    	} OrderingItems;
    	
    		available() -> / {
        		getRestoApp().removeCurrentOrder(getOrder(0));
      		} Available;
    	}
    } 
  }
}
