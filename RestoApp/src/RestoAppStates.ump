class Table {
  AvailabilityStatus {
    Available{
      inUse() -> InUse;
    }
    
    InUse {
      Idle{
        orderItem(List<OrderItem> orderItems) -> OrderingItem;
      }
      OrderingItem {
        orderItem(List<OrderItem> orderItems) -> /{
        	//Do something
        } OrderingItem;
        issueBill(Order order, List<Seat> seats) [numberOfOrders() > 1] -> OrderingItem;
        issueBill(Order order, List<Seat> seats) [numberOfOrders() =< 1] -> IssuingBill;
      }
      
      IssuingBill {
      	orderItem() -> OrderingItem;
      	available() [nbOfBills != 0] -> /{
      		
      	} IssuingBill;
        available() [nbOfBills == 0] -> Available;
        payBill(Bill bill) [numberofBills() > 1] -> IssuingBill
        payBill(Bill bill) [numberOfBills() == 0] -> Idle;
      }
      
    }
    available() -> /{
    	if (numberOfOrders != 0) {
    		throw new RuntimeException("A table having orders cannot be put as available.");
    	}
    }
    } Available;
  }
  
  
  ReservationStatus {
    NotReserved {
    	reserve() -> Reserved;
    }
    
    Reserved {
    	entry / { showNextReservation(); }
    	unreserve() [!hasReservations()] -> NotReserved;
    	unreserve() [hasReservations()] -> Reserved;

    }
  }
}
